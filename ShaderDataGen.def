#if GENERATION_PASS == GENERATE_MEMBERS

#undef CONSTANT
#undef CONSTANT_ARRAY
#undef TEXTURE_2D
#undef TEXTURE_CUBE
#undef TEXTURE_3D
#undef SAMPLER_STATE
#undef UAV_TEXTURE_2D
#undef UAV_TEXTURE_2D_SLICE
#undef UAV_TEXTURE_2D_ARRAY
#undef BUFFER
#undef UAV_BUFFER

#define CONSTANT(Name, Type) Type _##Name;
#define CONSTANT_ARRAY(Name, Type, Size) Type _##Name[Size]; uint _##Name##Count;
#define TEXTURE_2D(Name, Type) TextureID _##Name;
#define TEXTURE_CUBE(Name, Type) TextureID _##Name;
#define TEXTURE_3D(Name, Type) TextureID _##Name;
#define SAMPLER_STATE(Name) SamplerStateID _##Name;
#define UAV_TEXTURE_2D(Name, Type) TextureID _##Name;
#define UAV_TEXTURE_2D_SLICE(Name, Type) TextureID _##Name; int _##Name##Slice;
#define UAV_TEXTURE_2D_ARRAY(Name, Type) TextureID _##Name;
#define BUFFER(Name, Type) StructuredBufferID _##Name;
#define UAV_BUFFER(Name, Type) StructuredBufferID _##Name;

#elif GENERATION_PASS == GENERATE_ACCESSORS

#undef CONSTANT
#undef CONSTANT_ARRAY
#undef TEXTURE_2D
#undef TEXTURE_CUBE
#undef TEXTURE_3D
#undef SAMPLER_STATE
#undef UAV_TEXTURE_2D
#undef UAV_TEXTURE_2D_SLICE
#undef UAV_TEXTURE_2D_ARRAY
#undef BUFFER
#undef UAV_BUFFER

#define ACCESSOR_HELPER(Name, Type) const Type Get##Name() const { return _##Name; } \
									void Set##Name(Type val) { _##Name = val; }

#define ARRAY_ACCESSOR_HELPER(Name, Type) const Type* Get##Name() const { return _##Name; } \
										  uint Get##Name##Count() const { return _##Name##Count; } \
										  void Set##Name##Raw(const void* vals, uint size) { \
											 ::memcpy(_##Name, vals, size); \
											 _##Name##Count = (size + sizeof(Type)-1) / sizeof(Type); \
										  } \
										  void Set##Name(const Type* vals, uint count) { Set##Name##Raw(vals, count * sizeof(Type)); }

#define CONSTANT(Name, Type) ACCESSOR_HELPER(Name, Type)
#define CONSTANT_ARRAY(Name, Type, Size) ARRAY_ACCESSOR_HELPER(Name, Type)
#define TEXTURE_2D(Name, Type) ACCESSOR_HELPER(Name, TextureID)
#define TEXTURE_CUBE(Name, Type) ACCESSOR_HELPER(Name, TextureID)
#define TEXTURE_3D(Name, Type) ACCESSOR_HELPER(Name, TextureID)
#define SAMPLER_STATE(Name) ACCESSOR_HELPER(Name, SamplerStateID)
#define UAV_TEXTURE_2D(Name, Type) ACCESSOR_HELPER(Name, TextureID)
#define UAV_TEXTURE_2D_ARRAY(Name, Type) ACCESSOR_HELPER(Name, TextureID)
#define BUFFER(Name, Type) ACCESSOR_HELPER(Name, StructuredBufferID)
#define UAV_BUFFER(Name, Type) ACCESSOR_HELPER(Name, StructuredBufferID)

#define UAV_TEXTURE_2D_SLICE(Name, Type)	const TextureID Get##Name() const { return _##Name; } \
											void Set##Name(TextureID val, int slice) { _##Name = val; _##Name##Slice = slice; }


#elif GENERATION_PASS == GENERATE_APPLY

#undef CONSTANT
#undef CONSTANT_ARRAY
#undef TEXTURE_2D
#undef TEXTURE_CUBE
#undef TEXTURE_3D
#undef SAMPLER_STATE
#undef UAV_TEXTURE_2D
#undef UAV_TEXTURE_2D_SLICE
#undef UAV_TEXTURE_2D_ARRAY
#undef BUFFER
#undef UAV_BUFFER

#define STR(x) #x
#define CALL_STATE_HELPER(Name) stateHelper->SetShaderParam(STR(Name), _##Name);

#define CONSTANT(Name, Type) CALL_STATE_HELPER(Name)
#define CONSTANT_ARRAY(Name, Type, Size) stateHelper->SetShaderArray(STR(Name), _##Name, _##Name##Count);
#define TEXTURE_2D(Name, Type) stateHelper->SetShaderTexture(STR(Name), _##Name);
#define TEXTURE_CUBE(Name, Type) stateHelper->SetShaderTexture(STR(Name), _##Name);
#define TEXTURE_3D(Name, Type) stateHelper->SetShaderTexture(STR(Name), _##Name);
#define SAMPLER_STATE(Name) stateHelper->SetSamplerState(STR(Name), _##Name);
#define UAV_TEXTURE_2D(Name, Type) stateHelper->SetUnorderedAccessTexture(STR(Name), _##Name);
#define UAV_TEXTURE_2D_SLICE(Name, Type) stateHelper->SetUnorderedAccessTexture(STR(Name), _##Name, _##Name##Slice);
#define UAV_TEXTURE_2D_ARRAY(Name, Type) UAV_TEXTURE_2D(Name, Type);
#define BUFFER(Name, Type) stateHelper->SetStructBuffer(STR(Name), _##Name);
#define UAV_BUFFER(Name, Type) stateHelper->SetUAVBuffer(STR(Name), _##Name);

#endif // GERETAION_PASS